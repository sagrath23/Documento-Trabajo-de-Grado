#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language spanish
\inputencoding auto
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics emtex
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Introducción
\end_layout

\begin_layout Standard
El objetivo de este capítulo es brindar una descripción del problema que
 aborda este trabajo de grado,  justificar su solución y establecer los
 objetivos generales y específicos que se cumplirán para su solución.
\end_layout

\begin_layout Section
Descripción del Problema
\end_layout

\begin_layout Standard
Una de las aplicaciónes del modelamiento y resolución de problemas basado
 en restricciones que no se asociaría normalmente con el tipo de problemas
 modelados usando esta técnica es la música.
 Una de las ventajas de la música respecto a otras artes, como el dibujo,
 el baile o la arquitectura, es que esta es la que ha sido objeto de rigurosas
 formalizaciones desde sus mas tempranas etapas.
 En especial la llamada 
\emph on
música tonal
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
En la música tonal, el papel de la tónica (primera nota de una escala) se
 afirma a través de las relaciones que con ella establecen los otros grados
 de la escala y los acordes (conjuntos de sonidos) que se forman sobre ellos.
 Este entramado armónico, es conocido como armonía funcional.
\end_layout

\end_inset

, basada en la idea de 
\emph on
tonalidad
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
jerarquización de todos los sonidos alrededor de uno principal (tónica).
\end_layout

\end_inset

, ha sido desarrollada en un marco de trabajo que está particularmente bien
 adaptado al modelamiento computacional y a su solución por medios computacional
es.
 Las aplicaciones de la programación por restricciones en música pueden
 cubrir un amplio rango de estructuras e ideas musicales, ya que muchos
 de estos son problemas de carácter combinatorio.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Normalmente, se espera que una libreria de programación por restricciones
 encuentre al menos una respuesta que satisfaga todas las restricciones
 que definen el modelo del problema.
 A este tipo de soluciones se les denomina como 
\begin_inset Quotes eld
\end_inset

soluciones completas
\begin_inset Quotes erd
\end_inset

; pero debido a las rigurosas formalizaciones de las que ha sido objeto
 la música, la naturaleza de los problemas musicales es sobre-restringida,
 lo cual afecta gravemente el rendimiento de la libreria de programación
 por restricciones que se utilice.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Por este motivo se desarrollaron librerias de programación por restricciones
 que no buscan satisfacer todas las restricciones definidas en el modelo
 del problema, sino que buscan soluciones que satisfagan el mayor numero
 de restricciones posible.
 A este tipo de soluciones se les denomina como 
\begin_inset Quotes eld
\end_inset

soluciones parciales
\begin_inset Quotes erd
\end_inset

.
 Resulta obvio que una libreria que no busca soluciones completas tardara
 menos en encontrar soluciones a un problema en comparación con una libreria
 que solo busque soluciones completas al mismo problema.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
A partir de esta situación, y del estado actual de las librerias de programación
 por restricciones, se plantean las siguientes preguntas: 
\end_layout

\begin_layout Itemize
\noindent
¿es posible para una libreria de programación por restricciones que busque
 soluciones completas encontrar dichas soluciones para un problema de armonia
 musical? 
\end_layout

\begin_layout Itemize
\noindent
¿puede encontrarlas en un tiempo razonable?
\end_layout

\begin_layout Itemize
¿puede una libreria como GECODE (que busca soluciones completas) competir
 en tiempo con una libreria como OMClouds (que busca soluciones parciales)?
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
La Programación por restricciones es un paradigma de la programación en
 informática, donde las relaciones entre las variables son expresadas en
 términos de restricciones (ecuaciones).
 El enfoque de la programación por restricciones se basa principalmente
 en buscar un estado en el cual una gran cantidad de restricciones sean
 satisfechas simultáneamente.
 Un problema se define típicamente como un estado de la realidad en el cual
 existe un número de variables con valor desconocido.
 Un programa basado en restricciones busca dichos valores para todas las
 variables en sus respectivos dominios.
 Actualmente es usada como una tecnología de software para la descripción
 y resolución de problemas combinatorios particularmente difíciles, especialment
e en las áreas de planificación y asignación de tareas (calendarización)
\begin_inset CommandInset citation
LatexCommand cite
key "key1"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\noindent
Actualmente, existen varios lenguajes de programación pensados para resolver
 problemas musicales definidos, entre ellos 
\emph on
OpenMusic 
\emph default
(OM)
\emph on
, 
\emph default
que es un lenguaje de programación completamente visual, funcional y orientado
 a objetos
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\noindent
basado en CommonLisp/CLOS, desarrollado por el IRCAM (Instituto Francés
 de Investigación en Ciencias de la Computación para Acústica y Música)
\end_layout

\end_inset

.
 Sobre OM se han desarrollado diversas librerías de solución de restricciones
 (CSL, de su sigla en Ingles 
\emph on
Constraint Solving Library
\emph default
) tales como OMClouds, que es una librería de solución de restricciones
 que incluye el algoritmo de 
\emph on
Búsqueda Adaptativa
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
la búsqueda adaptativa consiste en una búsqueda y reparación iterativa,
 con el fin de reducir el error en la variable con peor índice de error.
 La idea básica es calcular una función de error por cada restricción, entonces,
 se combina para cada variable el error de las restricciones en las que
 aparece, por lo tanto se proyectan los errores de las restricciones en
 las variables involucradas.
 La variable con el error mas grande es modificada, eligiendo un valor en
 el dominio tal que su error sea mínimo.
\end_layout

\end_inset


\emph default
 , que le proporciona al usuario la facilidad de definir un CSP de forma
 gráfica, resolverlo, y editar las soluciones parciales durante el proceso
 de resolución 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

; 
\emph on
OMSituation
\emph default
, que es capaz de generar música a partir de restricciones, 
\emph on
OmRC
\emph default
 encuentra estructuras acordes a restricciones rítmicas 
\begin_inset CommandInset citation
LatexCommand cite
key "key3"

\end_inset

, y 
\emph on
OMBacktrack
\emph default
, que es un Wrapper para Screamer (Un CSL escrito en LISP)
\end_layout

\begin_layout Plain Layout
\noindent
Por otra parte, GECODE 
\begin_inset CommandInset citation
LatexCommand cite
key "key4"

\end_inset

 es un conjunto de herramientas para desarrollo de sistemas y aplicaciones
 basados en restricciones escrito en C++.
 GECODE cuenta con un solucionador (o Solver en Ingles) de restricciones
 con el desempeño del estado de la técnica siendo modular y extensible.
 GECODE está radicalmente abierta a la programación: puede ser facilmente
 conectada con otros sistemas.
 Soporta la escritura de nuevos propagadores (como implementación de restriccion
es), estrategias de distribución, y motores de búsqueda.
 Además, se pueden implementar nuevos dominios de variables al mismo nivel
 de eficiencia que los dominios finitos y los conjuntos de enteros que vienen
 predefinidos con GECODE.
\shape italic

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Desafortunadamente, OMSituation y OmRC son CSL para tareas especificas,
 OMBactrack no esta incluida en las últimas versiones de OM, y OMClouds
 no garantiza una solución que satisfaga todas las restricciones (no encuentra
 una solución completa).
 Al ver esta situación, se pensó en la necesidad de estudiar el comportamiento
 que presentan estos CSL's, con el fin de obtener información practica sobre
 el rendimiento de estos CSL's al solucionar este tipo de problemas.
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Formulación del Problema
\end_layout

\begin_layout Standard
Después de este análisis se plantearon las siguientes preguntas:
\end_layout

\begin_layout Itemize
¿Puede un CSL (Libreria de programación por restricciones) completo como
 GECODE encontrar soluciones completas a problemas de armonía musical, en
 un tiempo razonable en comparación al tiempo que emplea OMClouds para encontrar
 soluciones parciales?
\end_layout

\begin_layout Itemize
¿Puede un CSL completo como GECODE encontrar soluciones completas a problemas
 de armonía musical, usando menos memoria que la usada por OMClouds para
 encontrar soluciones parciales?
\end_layout

\begin_layout Itemize
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
parece redundante
\end_layout

\end_inset

¿Puede GECODE encontrar soluciones a otro tipo de problemas musicales (ritmicos,
 de composición), usando menos memoria y en menor tiempo que OMSituation
 y OmRC?
\end_layout

\begin_layout Itemize
¿Que impacto tiene el tipo de modelamiento que se haga en el rendimiento
 del CSL?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Justificación
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Puesto que hasta la fecha no se ha hecho una evaluación comparativa entre
 GECODE y OMClouds, a continuación se exponen las justificaciones para este
 trabajo: 
\end_layout

\begin_layout Itemize
Se dará una base comparativa del rendimiento en tiempo y espacio requerido
 de las librerias para programación por restricciones estudiadas, en baso
 a los tres casos de estudio planteados para este trabajo.
\end_layout

\begin_layout Itemize
Se identificaran aspectos propios de cada libreria que mejoren el rendimiento
 en tiempo y espacio requerido para encontrar soluciones a los tres casos
 de estudio planteados.
\end_layout

\begin_layout Itemize
Se evaluará el impacto de los niveles de consistencia, formas de propagación
 y motores de busqueda que define GECODE sobre el tiempo y espacio requerido
 para encontrar soluciones a los tres casos de estudio planteados.
\end_layout

\begin_layout Itemize
Se evaluará el impacto de la busqueda adaptativa que implementa OMClouds
 sobre el tiempo y espacio requerido para encontrar soluciones a los tres
 problemas planteados.
\end_layout

\begin_layout Itemize
Se evaluará el impacto del uso de advisores en GECODE sobre el tiempo y
 espacio requerido para encontrar soluciones a los tres casos de estudio
 planteados.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El aspecto mas relevante de los problemas de satisfacción de restricciones
 en armonia musical resulta ser su caracter sobre-restringido, por este
 motivo las siguientes afirmaciones justifican este trabajo: 
\end_layout

\begin_layout Itemize
El estudio de problemas de satisfaccion de restricciones en armonia musical
 permitirá identificar tipos de modelamiento que se adapten mas a problemas
 de caracter sobre-restringido, y que mejore el comportamientos de los CSL
 en los que se implemente el modelo.
\end_layout

\begin_layout Itemize
El estudio de problemas de satisfacción de restricciones en armonia musical,
 su modelamiento y las herramientas que se utilizan para encontrar soluciones
 pueden ser utilizadas en otros problemas que tengan la caracteristica de
 ser sobre-restringidos, pero de naturalezas completamente diferente a la
 musical.
 
\end_layout

\begin_layout Itemize
A partir de las conclusiones que se puedan obtener de este trabajo, se pueden
 identificar escenarios en los cuales puede ser mas ventajoso utilizar un
 CSL completo como GECODE, y en cuales usar un CSL parcial como OMClouds.
\end_layout

\begin_layout Itemize
La comparación de las soluciones completas y las soluciones parciales de
 un mismo problema, permitirá determinar la relevancia musical de cada una,
 permitiendo establecer si es necesaria o no la busqueda de soluciones completas
 a este tipo de problemas.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Objetivos
\end_layout

\begin_layout Subsection
Objetivo General
\end_layout

\begin_layout Standard
Caracterizar aspectos propios de GECODE que mejoren el rendimiento de este
 en la busqueda de soluciones a los tres casos de estudio planteados, con
 respecto a OMClouds.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
el objetivo cambio un poco con respecto al del anteproyecto que era: Analizar,
 modelar e implementar 3 problemas de satisfacción de restricciones en armonía
 musical usando una librería para programación por restricciones completa
 y una librería para programación por restricciones parcial.
 cual de los dos esta mejor definido??
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Objetivos Específicos
\end_layout

\begin_layout Itemize
Definir los tres casos de estudio sobre los que se realizarán las pruebas
 con GECODE y OMClouds.
\end_layout

\begin_layout Itemize
Implementar los tres casos de estudio seleccionados en GECODE y OMCLouds.
\end_layout

\begin_layout Itemize
Comparar las soluciones obtenidas en GECODE contra las soluciones obtenidas
 en OMClouds para cada caso de estudio.
\end_layout

\begin_layout Itemize
Comparar los tiempos de ejecución de GECODE y OMClouds para cada caso de
 estudio.
\end_layout

\begin_layout Itemize
Comparar el espacio usado por el CSP usado en GECODE contra el espacio usado
 por el CSP implementado en OMClouds.
\end_layout

\begin_layout Itemize
Identificar aspectos técnicos y parámetros inherentes a GECODE que pueden
 afectar sustancialmente el desempeño en tiempo y consumo de memoria en
 la solución de problemas de armonía musical.
\end_layout

\begin_layout Itemize
Identificar aspectos y técnicas de modelamiento que puedan afectar sustancialmen
te el desempeño en tiempo y consumo de memoria en la solución de problemas
 de armonía musical.
\end_layout

\end_body
\end_document
