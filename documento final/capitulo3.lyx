#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
\setcounter{section}{2}
\usepackage{color}
\usepackage{alltt}
\usepackage{mdwlist}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Índice
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Identificación y Análisis del Problema
\end_layout

\begin_layout Standard
El objetivo de este capítulo es presentar:
\end_layout

\begin_layout Enumerate
Los tres casos de estudio que se usaron en este trabajo.
\end_layout

\begin_layout Enumerate
Las caracteristicas de estos casos de estudio que los hace problemas sobre-restr
ingidos.
\end_layout

\begin_layout Enumerate
Las caracteristicas de las librerias de programación por restricciones a
 estudiar.
\end_layout

\begin_layout Standard
Para cumplir con los anteriores objetivos fue necesario:
\end_layout

\begin_layout Itemize
Estudiar cada uno de los modelamientos de los casos de estudio seleccionados,
 para esto se buscaron problemas enfocados en armonia musical en articulos
 de investigación, tesis de maestria y tesis doctorales tales como 
\begin_inset CommandInset citation
LatexCommand cite
key "key-18"

\end_inset

.
\end_layout

\begin_layout Itemize
Estudiar las caracteristicas de las librerias de programación por restricciones
 seleccionadas.
\end_layout

\begin_layout Itemize
Estudiar las estrategias de distribución y busqueda de las librerias de
 programación por restricciones seleccionadas, y su impacto en el tiempo
 y espacio requerido en memoria para encontrar una solución.
\end_layout

\begin_layout Section
Casos de Estudio
\end_layout

\begin_layout Standard
En esta sección se definiran las caracteristicas matematicas de los problemas
 enfocados en armonia musical, su respectivo modelamiento y aquellas caracterist
icas propias del problema que lo convierten en un problema sobre-restringido.
\end_layout

\begin_layout Subsection
Serie con Todos los Intervalos
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Como se define en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-11"

\end_inset

 dados los doce tonos estandar (
\emph on
do, do#, re, ...
\emph default
), representados por numeros 0,1,...,11, encuentre una serie en la que cada
 tono aparezca solo una vez y en el que los intervalos entre notas vecinas
 cubra el conjunto completo de intervalos, desde la segunda menor (1 semitono)
 hasta la septima mayor (11 semitonos).
 Esto quiere decir, para cada uno de los intervalos, existe un par de tonos
 vecinos en la serie, entre los cuales aparece este intervalo.
\end_layout

\begin_layout Plain Layout
El problema de encontrar una serie con estas restricciones puede ser favilmente
 formulado como una instancia de un problema aritmetico mas general en 
\begin_inset Formula $Z_{n}$
\end_inset

, el conjunto de residuos enteros modulo 
\begin_inset Formula $n$
\end_inset

.
 Dado 
\begin_inset Formula $n$
\end_inset

 en 
\begin_inset Formula $N$
\end_inset

, encontrar un vector 
\begin_inset Formula $S=\{S_{1},S_{2},...,S_{n}\}$
\end_inset

 tal que: 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 sea una permutación de 
\begin_inset Formula $Z_{n}=\{0,1,...,n-1\}$
\end_inset

.
\end_layout

\begin_layout Enumerate
El vector de intervalos 
\begin_inset Formula $V=\{\Vert S_{2}-S_{1}\Vert,\Vert S_{3}-S_{2}\Vert,...,\Vert S_{n}-S_{n-1}\Vert\}$
\end_inset

 sea una permutación de 
\begin_inset Formula $Z_{n}-\{0\}=\{1,2,...,n-1\}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Un vector 
\begin_inset Formula $V$
\end_inset

 que satisfaga estas condiciones es llamado 
\emph on
Serie de Todos los Intervalos 
\emph default
de tamaño 
\begin_inset Formula $n$
\end_inset

.
 La fig.
 3.1 ilustra una solución a este problema.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se define en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-19"

\end_inset

 este problema consiste en encontrar una permutación de 
\begin_inset Formula $n$
\end_inset

 números consecutivos 
\begin_inset Formula $0,1,2,...,n-1$
\end_inset

 tal que el valor absoluto de la resta entre cada par de numeros de la permutaci
ón sea a su vez una permutación de un conjunto de 
\begin_inset Formula $n-1$
\end_inset

 números consecutivos 
\begin_inset Formula $1,2,...,n-1$
\end_inset

.
\end_layout

\begin_layout Standard
Formalmente, tenemos que:
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $Z=\left\{ 0,1,2,...,n-1\right\} $
\end_inset

, se busca un conjunto 
\begin_inset Formula $S=\left\{ S_{1},S_{2},...,S_{n}\right\} $
\end_inset

tal que 
\begin_inset Formula $P(Z,n)=S$
\end_inset

.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $Z_{1}=Z-\left\{ 0\right\} =\left\{ 1,2,...,n-1\right\} $
\end_inset

, se busca un conjunto 
\begin_inset Formula $I=\{\Vert S_{2}-S_{1}\Vert,\Vert S_{3}-S_{2}\Vert,...,\Vert S_{n}-S_{n-1}\Vert\}$
\end_inset

 tal que 
\begin_inset Formula $P(Z_{1},n-1)=I$
\end_inset

.
\end_layout

\begin_layout Standard
un ejemplo con 
\begin_inset Formula $n=12$
\end_inset

, que representaría los 12 tonos de la escala cromatica occidental, se ilustra
 en la fig.
 3.1:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/all interval.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
una solución al problema de la serie con todos los intervalos, para 
\begin_inset Formula $n=12$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para este ejemplo, con 
\begin_inset Formula $n=12$
\end_inset

, en la tabla 3.1 se muestra la representación de los 12 tonos que componen
 la escala cromatica.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="13">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Tono
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
do
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
do#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
re
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
re#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fa#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sol#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
la
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
la#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
si
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Equivalencia numerica de tonos de la escala cromatica
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Entonces, para el ejemplo de la fig.
 3.1 se tiene que 
\begin_inset Formula $S=\{6,11,0,10,1,9,2,8,5,7,3,4\}$
\end_inset

 e 
\begin_inset Formula $I=\left\{ 5,11,10,9,8,7,6,3,2,4,1\right\} $
\end_inset

, lo que verifica que 
\begin_inset Formula $S$
\end_inset

 es solución al problema de la serie con todos los intervalos para 
\begin_inset Formula $n=12$
\end_inset

.
\end_layout

\begin_layout Standard
Segun 
\begin_inset CommandInset citation
LatexCommand cite
key "key-20"

\end_inset

, para 
\begin_inset Formula $n=12$
\end_inset

 existen 3856 soluciones conocidas.
 Encontrar una solución para este problema es un proceso relativamente sencillo,
 ya que bastará con distribuir los 
\begin_inset Formula $n$
\end_inset

 valores, así:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $S=\{n,\;1,\; n-1,\;2,\;...,floor(\nicefrac{n}{2})+2,\; floor(\nicefrac{n}{2})-1,\; floor(\nicefrac{n}{2})+1,\; floor(\nicefrac{n}{2})\}$
\end_inset


\end_layout

\begin_layout Standard
Obteniendo los intervalos: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $I=\{n-1,\; n-2,\;...,\;2,\;1\}$
\end_inset


\end_layout

\begin_layout Standard
La dificultad de este problema se encuentra en encontrar todas las soluciones
 posibles para 
\begin_inset Formula $n$
\end_inset

 valores.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Resulta obvio que este problema presenta simetrias en sus respuestas, ya
 que cualquier secuencia se puede rotar, generando una nueva respuesta para
 el problema, es decir, si 
\begin_inset Formula $S=\left\{ S_{1},S_{2},...,S_{n}\right\} $
\end_inset

, entonces 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $S=\left\{ S_{n},S_{1},S_{2},...,S_{n-1}\right\} $
\end_inset

tambien será una permutación que cumpla con las restricciones del problema.

\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 Esta simetria, denominada 
\emph on
simetria de espejo
\emph default
 se puede eliminar facilmente, haciendo que 
\emph on

\begin_inset Formula $S_{1}<S_{2}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\emph on
en esta parte debería explicar por que esta restricción elimina la simetria?
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Otra simetria que se presenta en este problema, se debe a la posibilidad
 de invertir la secuencia, es decir, si 
\begin_inset Formula $S=\left\{ S_{1},S_{2},...,S_{n}\right\} $
\end_inset

, entonces 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $S=\left\{ S_{n},S_{n-1},...,S_{2},S_{1}\right\} $
\end_inset

tambien será una permutación que cumpla con las restricciones del problema
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
.
 Esta simetria, que genera soluciones iguales, se puede eliminar de la misma
 forma que se elimina en el problema de la 
\emph on
regla de golomb 
\begin_inset CommandInset citation
LatexCommand cite
key "key-29"

\end_inset


\emph default
, haciendo que 
\emph on

\begin_inset Formula $I_{1}>I_{n-2}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\emph on
en esta parte debería explicar por que esta restricción elimina la simetria?
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Al aplicar estas restricciones sobre el problema, se obtienen solo 332 solucione
s, como se demuestra en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-30"

\end_inset

.
\end_layout

\begin_layout Paragraph
Resumen del Modelamiento
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Datos: 
\begin_inset Formula $n\in\mathbb{Z}^{+}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Variables: 
\begin_inset Formula $S_{1},...,S_{n}$
\end_inset

 (tonos); 
\begin_inset Formula $I_{1},...,I_{n}$
\end_inset

 (Intervalos)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Dominio: 
\begin_inset Formula $\mathbb{Z}^{+}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Restricciones: 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $I_{i}=\Vert S_{i}-S_{i+1}\Vert$
\end_inset

 
\begin_inset Formula $\forall i<n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $alldif(S)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $alldif(I)$
\end_inset


\end_layout

\begin_layout Subsection
Serie de Acordes con Notas en Común
\end_layout

\begin_layout Standard
Como se describe en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-18"

\end_inset

, este problema consiste en encontrar una permutación de un conjunto de
 acordes tal que el numero de notas en comun entre cada par de acordes sea
 mayor a 0.
 
\end_layout

\begin_layout Standard
Formalmente, tenemos que: 
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $n$
\end_inset

 el numero de acordes y 
\begin_inset Formula $k$
\end_inset

 el numero de notas que componen cada acorde.
\end_layout

\begin_layout Enumerate
Entonces, tenemos que un acorde 
\begin_inset Formula $a_{i}=\left\{ t_{1},t_{2},...,t_{k}\right\} $
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $A=\left\{ a_{1},a_{2},...,a_{n}\right\} $
\end_inset

, se busca un conjunto 
\begin_inset Formula $S=\{s_{1},s_{2},...,s_{n}\}$
\end_inset

 tal que 
\begin_inset Formula $P(A,n)=S$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 debe cumplir que 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $\forall i\leq n-1,\; s_{i}\cap s_{i+1}\neq0$
\end_inset

.
\end_layout

\begin_layout Standard
En la fig.
 3.2 se ilustra una solución al problema con exactamente una nota en comun
 entre cada par de acordes.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/SerieUnaComun.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
una solución con una nota común sobre toda la secuencia.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora, debido a una particularidad del tipo de acordes que se usan en este
 problema, se puede cambiar la representación de los acordes, usando dos
 valores enteros 
\begin_inset Formula $f_{i}$
\end_inset

, que representa el tono fundamental del acorde; y 
\begin_inset Formula $t_{i}$
\end_inset

 que representa el intervalo (distancia) entre los tonos.
 
\end_layout

\begin_layout Standard
De esta forma, tenemos que:
\end_layout

\begin_layout Itemize
Un acorde 
\begin_inset Formula $a_{i}=\{f_{i}+(t_{i}*j),j\leq k\}$
\end_inset

.
\end_layout

\begin_layout Standard
Tambien se puede condicionar la solución de este problema de tal forma que
 el numero de notas en comun entre cada par de acordes se encuentre en un
 rango determinado por dos valores enteros 
\begin_inset Formula $m$
\end_inset

 y 
\begin_inset Formula $M$
\end_inset

, tales que:
\end_layout

\begin_layout Itemize
\begin_inset Formula $m\leq\sharp(a_{i}\cap a_{i+1})\leq M$
\end_inset

 
\end_layout

\begin_layout Standard
Siendo 
\begin_inset Formula $\sharp$
\end_inset

 la cardinalidad del conjunto generado por la intersección de 
\begin_inset Formula $a_{i}$
\end_inset

 y 
\begin_inset Formula $a_{i+1}$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Una solución con 
\begin_inset Formula $m=M=2$
\end_inset

 se muestra en la figura 3.3.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/SerieDosComun.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Una solución con exactamente dos nos notas comunes de un acorde al siguiente.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modificando la representación de los acordes, se pueden incluir otras restriccio
nes sobre el orden de las notas fundamentales y los intervalos de las notas,
 haciendo que las notas fundamentales aumenten al igual que los intervalos;
 de esta forma, tenemos que: 
\end_layout

\begin_layout Itemize
\begin_inset Formula $t_{i}<t_{i+1}$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $f_{i}<f_{i+1}$
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
Una solución a este problema aplicando las restricciones sobre las notas
 fundamentales y los intervalos se muestra en la figura 3.4.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/SerieDosRestricciones.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Una solución con dos restricciones sobre el movimiento global: notas fundamental
es crecientes en intervalos decrecientes.
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\noindent
\align block
El compositor Fabien Lévy propuso un CSP para una Serie de Acordes Frecuenciales.
 Estos acordes tienen una estructura particular: en el mismo acorde, todas
 las notas deben ser equidistantes en frecuencia, formando un espectro inarmónic
o
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\noindent
\align block
cuando la frecuencia de un sobre-tono no es múltiplo entero de la frecuencia
 fundamental se dice que él sonido es inarmónico y se lo llama parcial.
 Su forma de onda es aperiódica.
 Los instrumentos de la familia de la percusión, las campanas y los gongs
 en particular, tienen sobre-tonos en gran medida inarmónicos.
 Como consecuencia, tales sonidos pueden percibirse asociados a múltiples
 alturas o con altura indefinida
\end_layout

\end_inset

.
 Las restricciones se aplican sobre el numero de notas comunes entre dos
 acordes sucesivos, con varias variantes: exactamente una nota común de
 un acorde al otro, por lo menos una, incluso un rango de notas comunes.
 Una Solución a este problema se muestra en la figura 3.2.
 
\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/SerieUnaComun.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
una solución con una nota común sobre toda la secuencia.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align block
Esto se traduce formalmente así: sean 
\begin_inset Formula $I$
\end_inset

 y 
\begin_inset Formula $J$
\end_inset

 dos enteros.
 La serie de acordes se representa por una lista de 
\begin_inset Formula $I$
\end_inset

 listas de 
\begin_inset Formula $J$
\end_inset

 enteros, seria 
\begin_inset Formula $(\alpha_{i}^{j})\; j\leq J,i\leq I$
\end_inset

.
 Las restricciones se escriben:
\end_layout

\begin_layout Enumerate
\noindent
\align block
Acordes en frecuencia: 
\begin_inset Formula $\forall i\leq I,\;\forall j_{1},\; j_{2}\leq J-1,\;\alpha_{i}^{j_{1}+1}-\alpha_{i}^{j_{1}}=\alpha_{i}^{j_{2}+1}-\alpha_{i}^{j_{2}}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\noindent
Al menos una nota en común: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $\forall i\leq I-1,\;\alpha_{i}\cap\alpha_{i+1}\neq0$
\end_inset

.
\end_layout

\begin_layout Plain Layout
\noindent
La primera restricción se reduce por un cambio simple de parámetros, tomando
 como representación del acorde no las notas que lo componen, sino su nota
 fundamental 
\begin_inset Formula $f_{i}$
\end_inset

, el intervalo frecuencial 
\begin_inset Formula $t_{i}$
\end_inset

 que existe entre dos notas, y 
\begin_inset Formula $J$
\end_inset

 es el numero de notas por acorde.
 Entonces, tenemos 
\begin_inset Formula $\alpha_{i}^{j}=f_{i}+(t_{i}*j)$
\end_inset

 para 
\begin_inset Formula $j\leq J$
\end_inset

.
\end_layout

\begin_layout Plain Layout
\noindent
La segunda restricción debe ser precisada.
 
\end_layout

\begin_layout Plain Layout
\noindent
Primero, no queremos una serie de acordes constantes, que sin embargo satisfacen
 esta restricción.
 Por otro lado, Fabien deseaba también ajustar (reglamentar el numero de
 notas comunes deseadas de un acorde al otro).
 Notando aquí que 
\begin_inset Formula $C_{i}=\sharp(\alpha_{i}\cap\alpha_{i+1})$
\end_inset

, la restricción se escribe como un encadenamiento de 
\begin_inset Formula $C_{i}$
\end_inset

 entre dos parámetros fijos 
\begin_inset Formula $m$
\end_inset

 y 
\begin_inset Formula $M$
\end_inset

, así: 
\begin_inset Formula $\forall i\leq I-1\; m\leq C_{i}\leq M$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
\noindent
Según los valores de 
\begin_inset Formula $m$
\end_inset

 y 
\begin_inset Formula $M$
\end_inset

, se obtienen todos los casos de las figuras, por ejemplo, un numero fijo
 de notas comunes a toda la secuencia con 
\begin_inset Formula $m=M$
\end_inset

, o garantizar que los acordes son diferentes con 
\begin_inset Formula $m=J$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
\noindent
Una solución con 
\begin_inset Formula $m=M=2$
\end_inset

 se muestra en la figura 3.3.
\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/SerieDosComun.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Una solución con exactamente dos nos notas comunes de un acorde al siguiente.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
Finalmente, el compositor quería tener dos restricciones suplementarias
 sobre el movimiento de la fundamental, y sobre los intervalos (crecientes
 o decrecientes).
 Estas dos restricciones son menos importantes que las anteriores, y pueden
 ser violadas.
 Estas se escriben simplemente sobre la representación de la frecuencia:
\end_layout

\begin_layout Enumerate
Intervalos Crecientes: 
\begin_inset Formula $t_{1}<...<t_{I}$
\end_inset


\end_layout

\begin_layout Enumerate
Notas Fundamentales Crecientes: 
\begin_inset Formula $f_{1}<...<f_{I}$
\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
Se puede variar el CSP e imponer misma nota en común para el ensamble de
 la secuencia, como se muestra en la figura 3.4.
\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/SerieDosRestricciones.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Una solución con dos restricciones sobre el movimiento global: notas fundamental
es crecientes en intervalos decrecientes.
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
Resumen del Modelamiento
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Datos: 
\begin_inset Formula $I,\; J,\; m,\; M\in\mathbb{Z}^{+}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Variables: 
\begin_inset Formula $t_{1},...,t_{n}$
\end_inset

 (intervalos), 
\begin_inset Formula $f_{1},...,f_{n}$
\end_inset

 (notas fundamentales)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Dominio: 
\begin_inset Formula $\mathbb{Z}^{+}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Restricciones: 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha_{i}=\{f_{i}+(t_{i}*j),j\leq J\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $m\leq\sharp(\alpha_{i}\cap\alpha_{i+1})\leq M$
\end_inset

 
\end_layout

\begin_layout Enumerate
(opcional) 
\begin_inset Formula $t_{i}<t_{i+1}$
\end_inset


\end_layout

\begin_layout Enumerate
(opcional) 
\begin_inset Formula $f_{i}<f_{i+1}$
\end_inset


\end_layout

\begin_layout Subsection
Clasificación de Acordes
\end_layout

\begin_layout Standard
Como se define en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-18,key-33"

\end_inset

, dado un conjunto 
\begin_inset Formula $X$
\end_inset

 de 
\begin_inset Formula $n$
\end_inset

 acordes, 
\begin_inset Formula $A_{1}...A_{n}$
\end_inset

 (siendo 
\begin_inset Formula $A_{i}$
\end_inset

 un conjunto de valores enteros), se busca ordenarlos de tal forma que el
 numero de notas en común entre dos acordes sucesivos sea máximo.
 Denotamos el numero de notas en común entre 
\begin_inset Formula $A_{i}$
\end_inset

 y 
\begin_inset Formula $A_{j}$
\end_inset

 por 
\begin_inset Formula $C_{i,j}$
\end_inset

, tal que 
\begin_inset Formula $C_{i,j}=\sharp(A_{i}\cap A_{j})$
\end_inset

.
 El dominio es el conjunto de las permutaciones de 
\begin_inset Formula $A_{i}$
\end_inset

, que se obtiene con una restricción 
\emph on
alldif
\emph default
 (todos diferentes).
 La única restricción entonces se escribe: 
\begin_inset Formula $max\;\sum_{1\leq i\leq n-1}\, C_{i,i+1}$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Esta restricción, en toda la secuencia, no impone la continuidad musical
 entre dos acordes sucesivos, es decir, no garantiza que exista una relación
 armonica entre todos los acordes del conjunto.
 A veces encontramos una solución óptima, pero con 
\begin_inset Quotes eld
\end_inset

agujeros
\begin_inset Quotes erd
\end_inset

 en la secuencia, por ejemplo cero notas en común entre dos acordes consecutivos.
 Para evitar esto, y mantener la continuidad musical, se pueden imponer
 
\begin_inset Formula $n-1$
\end_inset

 restricciones 
\begin_inset Formula $C_{i,i+1}\geq1$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Esta restricción causa que no se encuentre una solución para el problema
 si no existe una relación armonica entre los acordes de entrada.
\end_layout

\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Este es evidentemente equivalente al 
\emph on
problema del
\emph default
 
\emph on
Viajante 
\emph default
(TSP por sus siglas en ingles, tomando como ciudades los acordes, y tomando
 como distancia entre la ciudad 
\begin_inset Formula $i$
\end_inset

 y 
\begin_inset Formula $j$
\end_inset

 
\begin_inset Formula $N-C_{i,j}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Usando esta representación, se soluciona la sobre-restricción del problema,
 generando un grafo completo entre los 
\begin_inset Formula $n$
\end_inset

 acordes, pero no se garantiza la continuidad musical.
 
\end_layout

\end_inset

 tomando un 
\begin_inset Formula $N$
\end_inset

 (
\begin_inset Formula $N\geq max_{1\leq i,\, j<n}C_{i,j}$
\end_inset

).
 Para un orden dado en los acordes, la suma de las notas comunes entre dos
 acordes consecutivos debe ser igual a 
\begin_inset Formula $N*n$
\end_inset

 menos la distancia de la ruta correcta entre las ciudades.
 Maximizar las notas comunes se convierte en minimizar la distancia total
 recorrida.
\emph on

\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\emph on
Nota: Seria interesante evaluar el concepto de modulación, una practica
 que permite cambiar el 
\begin_inset Quotes eld
\end_inset

tono
\begin_inset Quotes erd
\end_inset

 de la armonia y que permitiria garantizar la continuidad músical y las
 restricciones del modelo.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Resumen del Modelamiento
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Datos: 
\begin_inset Formula $n$
\end_inset

 acordes 
\begin_inset Formula $A_{1},...,A_{n}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Variables: 
\begin_inset Formula $A_{1},...,A_{n}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Dominio: permutaciones de 
\begin_inset Formula $A_{1},...,A_{n}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Restricciones: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{1}$
\end_inset

 
\begin_inset Formula $Max\;\sum_{i\neq j}\sharp A_{i}\cap A_{j}$
\end_inset

 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{2}$
\end_inset

 (opcional) 
\begin_inset Formula $\sharp A_{i}\cap A_{j}\geq1$
\end_inset


\end_layout

\begin_layout Subsection
Armonizar una Estructura Rítmica
\end_layout

\begin_layout Standard
Segun 
\begin_inset CommandInset citation
LatexCommand cite
key "key-18,key-27"

\end_inset

 este problema consiste en armonizar un canon de longitud 
\begin_inset Formula $p$
\end_inset

 y de 
\begin_inset Formula $n$
\end_inset

 voces.
 Si se desean mas detalles sobre la estructura de un Canon ritmico, se puede
 consultar 
\begin_inset CommandInset citation
LatexCommand cite
key "key-28"

\end_inset

.
 El objetivo de este problema es armonizar la estructura ritmica del canon,
 osea dar un valor definido a cada tono.
 Las notas se sostienen, y el acorde formado en cada instante varia solo
 en una nota con respecto al acorde anterior, debido a la estructura del
 canon.
 Pare esre fin se define 
\begin_inset Formula $C_{i}$
\end_inset

 como el acorde tocado en el instante 
\begin_inset Formula $i$
\end_inset

.
\begin_inset Newline newline
\end_inset

La primera restricción consiste en minimizar una función de distancia 
\begin_inset Formula $E$
\end_inset

 entre los acordes, denominada 
\emph on
distancia estrada.
 
\emph default
Para calcular 
\begin_inset Formula $E$
\end_inset

 se debe calcular la 
\emph on
textura 
\emph default
del acorde, que es el conjunto de todos los intervalos internos del acorde
 transportados a la misma octava, adicionando el complemento para que la
 suma de estos valores sea 
\begin_inset Formula $12$
\end_inset

.
 por ejemplo, los acordes son sol#1,do#7, fa8
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
el numero al lado del tono indica la octava en la que se esta tocando el
 tono.
\end_layout

\end_inset

.
 Hay do#-fa-sol#, si consideramos la distancia entre los tonos, tenemos
 que entre do# y fa hay 4 tonos, y entre fa y sol# hay 3, y añadimos 5 para
 obtener la suma 12.
 el resultado es la textura 3-4-5.
 
\end_layout

\begin_layout Standard
La distancia 
\begin_inset Formula $d$
\end_inset

 es entonces el número de valores diferentes en la textura, es decir, el
 número de notas en el acorde menos el numero de intervalos comunes enla
 textura, menos 
\begin_inset Formula $1$
\end_inset

.
 Formalmente, tenemos que 
\begin_inset Formula $E(Text_{1},Text_{2})=(numero\; de\; notas\; del\; acorde)-(numero\; intervalos\; comunes\; entre\; Text_{1}\; y\; Text_{2})-1$
\end_inset

 representa el valor de la distancia estrada entre dos texturas.
 Una opción es minimizar la distancia estrada entre los acordes y un acorde
 fijo.
\begin_inset Newline newline
\end_inset

La segunda restricción consiste en minimizar la diferencia entre las fundamental
es virtuales 
\begin_inset Formula $f$
\end_inset

 de dos acordes consecutivos.
 Para este fin, se define 
\begin_inset Formula $f$
\end_inset

 como la nota mas baja en un intervalo de quinta si se encuentra en el acorde,
 si no se encuentra, 
\begin_inset Formula $f$
\end_inset

 sería la nota mas baja en un intervalo de tercera si se encuetra en el
 acorde, si no se encuentra, 
\begin_inset Formula $f$
\end_inset

 sería la nota mas baja del acorde.
 Por este motivo, se define 
\begin_inset Formula $D_{f}$
\end_inset

, para valores de 
\begin_inset Formula $d=(F(C_{1})-F(C_{2}))mod12$
\end_inset

, los cuales concuerdan con el circulo de quintas, mostrado en el cuadro
 3.2.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="13">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $d$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $D_{f}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Tabla de distancias
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una Tercera restricción condiciona el movimiento melodico de las voces.
 Se impone sobre cada voz un perfil comun definido, con el mismo espacio
 en las entradas de las voces, para reforzar la precepción del canon.
\begin_inset Newline newline
\end_inset

Este CSP esta sobrerestringido, y un solver dará como solucion la misma
 nota siempre.
 Para evitar esto, se añaden restricciones 
\emph on
alldiff 
\emph default
, dejando dos opciones sobre el movimiento de las voces: una vertical con
 respecto a las otras voces, y una horizontal sobre la misma voz.
 Verticalmente, todas las notas debe ser diferentes, y horizontalmente,
 dos notas sucesivas deben ser diferentes.
 La opción vertical tiene dos inconvenientes: no tiene un verdadero significado
 musical, y restringe aun mas el problema.
 la opción horizontal es una mejor opción por dos motivos: consiste solo
 en añadir una pequeña restricción y asegura un movimiento melodico para
 cada voz.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Este problema fue definido por el compositor Georges Bloch.
 Suponga que se tiene una estructura rítmica de 
\emph on
Canon
\emph default
, llamada Canon rítmico regular complementario de categoría máxima.
 A continuación se dará una breve descripción de esta construcción.
 Supongamos que dada una 
\emph on
Pulsación 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Cortar el tiempo en valores enteros, en los que se definen los símbolos
 rítmicos.
 
\end_layout

\end_inset

, 
\emph default
los ataques (pulsaciones) ocurren en múltiplos enteros del pulso.
 Las voces juegan todas, en ciclos, con el mismo motivo rítmico.
 Cuando entran todas las voces, la superposición de ellas forma una pulsación
 regular, es decir, por cada pulsación escuchamos un único ataque.
 La figura 3.5 muestra las entradas para un canon a 6 voces.
\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/armonizacionEntradas.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Las entradas de las voces en un Canon Rítmico
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
La parte que nos interesa de este CSP es la estabilidad del canon, cuando
 todas las voces entran en repetidas ocasiones debido al 
\emph on
motivo
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
En música, un motivo es una idea musical corta, una figura repetitiva, un
 fragmento musical, o una sucesión de notas que tienen una importancia especial
 en la composición.
\end_layout

\end_inset

.
 El problema consiste en armonizar una estructura rítmica dada.
 Suponga que cada nota se mantiene hasta la siguiente ocurrencia de la misma
 voz.
 Así, en cada pulsación, una y solo una nota cambia en el conjunto formado
 verticalmente a través de todas las voces.
 La armonía buscada debe minimizar las distancias musicales, sobre los intervalo
s de cada acorde, y sobre la 
\emph on
fundamental virtual
\emph default
.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Siendo 
\begin_inset Formula $k$
\end_inset

 el numero de voces, y 
\begin_inset Formula $n$
\end_inset

 el periodo del canon.
 Para la escritura del CSP, no vale la pena considerar como variables todas
 las notas que se tocan, por que sabemos que solo una voz cambia con cada
 pulsación.
 Solo se consideran las 
\begin_inset Formula $n$
\end_inset

 variables 
\begin_inset Formula $V_{1}...V_{n}$
\end_inset

, siendo 
\begin_inset Formula $V_{i}$
\end_inset

 la nota que cambia en el i-esimo tiempo.
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
placement t
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/armonizacionEquilibrio.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
En estado de equilibrio, el acorde alcanzado en ese tiempo consiste en las
 notas sostenidas, y exactamente una nota que ha cambiado.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Con esta representación, cada acorde se compone de 
\begin_inset Formula $V_{i}$
\end_inset

, mas las notas tocadas por las otras voces, ver figura 3.6.
 Estas notas vienen de la pulsación anterior.
 Son variables cuyos índices no son muy fáciles de recuperar.
 Para ello, suponemos un índice 
\begin_inset Formula $i\leq n$
\end_inset

 que varía en las pulsaciones:
\end_layout

\begin_layout Itemize
Una función 
\emph on
voix
\emph default
 (voz), 
\emph on

\begin_inset Formula $voix(i)$
\end_inset

 
\emph default
retorna el índice de la voz que cambia en el tiempo 
\emph on
i.
\end_layout

\begin_layout Itemize
Dos funciones 
\emph on
next-voix 
\emph default
(voz siguiente) y 
\emph on
prev-voix 
\emph default
(voz anterior), 
\emph on
next-voix(i) 
\emph default
retorna el índice de la pulsación que 
\emph on

\begin_inset Formula $voix(i)$
\end_inset

 
\emph default
vuelve a cambiar, es decir, el siguiente cambio de 
\emph on

\begin_inset Formula $voix(i)$
\end_inset


\emph default
, y 
\emph on

\begin_inset Formula $prev-voix(i)$
\end_inset

 
\emph default
retorna el cambio que precedía a
\emph on
 
\begin_inset Formula $voix(i)$
\end_inset

.
\end_layout

\begin_layout Itemize
Los retrasos temporales de cada voz a partir de un cierto tiempo, se denota
 como 
\begin_inset Formula $d_{i}$
\end_inset

.
 Así por ejemplo, se toma el tiempo de entrada de cada voz, con cero como
 tiempo de referencia.
\end_layout

\begin_layout Plain Layout
Estas funciones son suficientes para representar las restricciones, y nos
 proveen de una abstracción de la estructura de Canon de la pieza a armonizar.
\end_layout

\begin_layout Paragraph
Primera Restricción: 
\end_layout

\begin_layout Plain Layout
Antes de definir la primera restricción, Georges Bloch definió una noción
 de distancia entre acordes, gracias a julio Estrada, 
\emph on
E.
 
\emph default
La palabra distancia se utiliza en un sentido musical, y no matemático.
 Esta distancia no se mide directamente sobre los acordes, sino en un subconjunt
o de datos intermedios, llamados textura.
 Georges Bloch la define así: 
\end_layout

\begin_layout Enumerate
Solo un acorde se toca.
 Las alturas que constituyen un acorde se devuelven en una octava.
 Un ejemplo entre do4y do5.
 Hay que tener en cuenta que se descarta el concepto de 
\emph on
inversión
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
La inversión de un acorde consiste en intercambiar las 3 notas que componen
 el acorde en la posición mas grave del pentágrama
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Los intervalos sucesivos son analizados, y clasificados según el numero
 de semitonos.
\end_layout

\begin_layout Enumerate
Un intervalo final se añade, de modo que la suma sea igual a 12 (teniendo
 en cuenta es que redundante hacerlo).
\end_layout

\begin_layout Enumerate
Los intervalos son ordenados de forma ascendente.
\end_layout

\begin_layout Plain Layout
Ejemplo: los acodes son sol#1,do#7, fa8.
 Hay do#-fa-sol#, si consideramos la distancia entre los tonos, tenemos
 que entre do# y fa hay 4 tonos, y entre fa y sol# hay 3, y añadimos 5 para
 obtener la suma 12.
 el resultado es la textura 3-4-5.
 
\end_layout

\begin_layout Plain Layout
Este análisis daría como resultado un acorde menor perfecto, para todas
 las inversiones de todas las tonalidades mayores y menores.
 La notación musical se utiliza para señalar la textura para el intervalo
 creciente comenzando por el do central en el piano.
 por ejemplo, la textura 1-1-3-7 se denota do-do#-re-fa (de do a do# 1,
 de do# a re 1, de re a fa 3, y añadimos 7 para obtener la suma de 12).
 
\end_layout

\begin_layout Plain Layout
Esto no quiere decir que la textura real contiene esas notas, o incluso
 intervalos en ese orden.
 Ha señalado que, la función de distancia Estrada también se aplica a micro-inte
rvalos.
 
\end_layout

\begin_layout Plain Layout
Para un momento dado, el numero total de notas en la octava es finito, por
 lo tanto, el numero de texturas posibles es finito.
 por ejemplo, dado el caso habitual de un rango en semitonos, este llega
 a 76.
 Este sistema es una clasificación de todos los acordes posibles para un
 momento dado.
\end_layout

\begin_layout Plain Layout
La distancia Estrada es calculada a partir de estas texturas.
 En el CSP, el numero de notas por acorde es constante, lo que simplifica
 la definición de la distancia, que cuenta el numero de distancias diferentes
 entre las texturas: 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $E(Text_{1},Text_{2})=(numero\; de\; notas\; del\; acorde)-(numero\; intervalos\; comunes\; entre\; Text_{1}\; y\; Text_{2})-1$
\end_inset


\end_layout

\begin_layout Plain Layout
Por convención, 
\begin_inset Formula $-1$
\end_inset

 se reducirá a 
\begin_inset Formula $0$
\end_inset

.
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Nótese que 
\begin_inset Formula $E$
\end_inset

 no verifica la desigualdad triangular, ya que es a menudo el caso, la palabra
 distancia en un sentido musical y es una medida de similitud perceptual.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
La primera restricción consiste en minimizar la distancia entre dos acordes
 sucesivos de la armonía.
 para dos acordes de 
\begin_inset Formula $n$
\end_inset

 notas con 
\begin_inset Formula $n-1$
\end_inset

 o 
\begin_inset Formula $n$
\end_inset

 notas en común, en el caso de un canon rítmico, los únicos valores posibles
 de 
\begin_inset Formula $E$
\end_inset

 son 
\begin_inset Formula $0$
\end_inset

 y 
\begin_inset Formula $2$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
Simple de expresar, esta restricción resulta engorrosa de escribir, por
 que el acorde esta en el 
\begin_inset Formula $i$
\end_inset

-esimo tiempo formado por las notas del acorde predecesor, proveniente de
 la función 
\begin_inset Formula $prev-voix$
\end_inset

.
 La restricción se escribe: 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $Min\; E(\{V_{i}\}\cup\{V_{prev-voix(j)},j\neq voix(i)\},\{V_{i+1}\}\cup\{V_{prev-voix(j)},j\neq voix(i+1)\})$
\end_inset


\end_layout

\begin_layout Paragraph
Variante: 
\end_layout

\begin_layout Plain Layout
Georges Bloch ha definido una variante del CSP, cuyas soluciones exactas
 son las mismas.
 Se trata de transformar algunas de las limitaciones para minimizar la distancia
 Estrada no entre dos acordes sucesivos, pero comparado con una textura
 de referencia fija.
 
\end_layout

\begin_layout Plain Layout
Musicalmente, esta opción permite establecer una textura uniforme en toda
 la secuencia, y en el caso de las soluciones aproximadas, se evita tener
 una textura muy diferente de la de partida textura final.
 limitaciones al otro, esto simplifica el CSP.
\end_layout

\begin_layout Paragraph
Segunda Restricción:
\end_layout

\begin_layout Plain Layout
La segunda restricción se aplica a las fundamentales virtuales de un acorde.
 Georges Bloch utiliza como definición de la fundamental virtual, denotada
 por 
\begin_inset Formula $F$
\end_inset

, de un acorde 
\begin_inset Formula $\{N_{1}...N_{k}\}$
\end_inset

:
\end_layout

\begin_layout Enumerate
Si el acorde que se forma con 
\begin_inset Formula $\{N_{1}...N_{k}\}$
\end_inset

 contiene un 
\emph on
intervalo de quinta
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Quinta o quinta justa, en música, es el intervalo musical compuesto por
 tres tonos y un semitono (por ejemplo, entre do y sol hay dicha distancia).
 Otra forma de expresarlo es que es el intervalo que comprende cinco notas
 de la escala musical
\end_layout

\end_inset

 
\emph default
entre 
\begin_inset Formula $N_{i}$
\end_inset

 y 
\begin_inset Formula $N_{j}$
\end_inset

, con 
\begin_inset Formula $N_{i}<N_{j}$
\end_inset

, siendo 
\begin_inset Formula $N_{i}$
\end_inset

 la fundamental virtual.
\end_layout

\begin_layout Enumerate
De lo contrario, si el acorde 
\begin_inset Formula $\{N_{1}...N_{k}\}$
\end_inset

 contiene un 
\emph on
intervalo de tercera mayor
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Se llama tercera al intervalo entre dos notas de la escala separadas por
 dos grados.
 Las terceras pueden ser mayores cuando hay cuatro semitonos entre los dos
 grados, y menores cuando hay tres semitonos entre ellos.
\end_layout

\end_inset

 
\emph default
entre 
\begin_inset Formula $N_{i}$
\end_inset

 y 
\begin_inset Formula $N_{j}$
\end_inset

, con 
\begin_inset Formula $N_{i}<N_{j}$
\end_inset

, siendo 
\begin_inset Formula $N_{i}$
\end_inset

 la fundamental virtual.
\end_layout

\begin_layout Enumerate
Si no se cumple lo anterior, se selecciona como fundamental virtual la nota
 mas baja del acorde.
\end_layout

\begin_layout Plain Layout
De hecho, el compositor inicialmente quería utilizar una fundamental virtual
 más realista , tal como existe en OpenMusic XXXREF-DE-GERARD.
 Esta idea fue descartada por razones prácticas de tiempo de computación.
 
\end_layout

\begin_layout Plain Layout
Sin embargo, se definen y utilizan tres variantes de la fundamental virtual:
 quinto grado como nota base, tercer y quinto grado como notas base (descrito
 arriba), y quinto y cuarto grado como notas base.
 A partir de 
\begin_inset Formula $F$
\end_inset

, Georges Bloch definió una segunda distancia entre los acordes 
\begin_inset Formula $A_{1}$
\end_inset

 y 
\begin_inset Formula $A_{2}$
\end_inset

, denotada como 
\begin_inset Formula $D_{f}$
\end_inset

.
 esta distancia es el intervalo entre las fundamentales de los acordes 
\begin_inset Formula $A_{1}$
\end_inset

 y 
\begin_inset Formula $A_{2}$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
Se mide la distancia entre 
\begin_inset Formula $F(A_{1})$
\end_inset

 y 
\begin_inset Formula $F(A_{2})$
\end_inset

.
 Pero la diferencia 
\begin_inset Formula $F(A_{1})-F(A_{2})$
\end_inset

 musicalmente, no tiene sentido (en la búsqueda de soluciones exactas, por
 ejemplo 
\begin_inset Formula $F(A_{1})=F(A_{2})$
\end_inset

, y ese no es el objetivo, véase mas adelante).
 De hecho, una diferencia de un segundo (un semitono) se considera más disonante
, más profundo, que una diferencia de un quinto (siete semitonos).
 
\end_layout

\begin_layout Plain Layout
Usaremos las tablas seleccionadas por Georges Bloch para medir la diferencia
 entre las fundamentales virtuales, Siendo 
\begin_inset Formula $d=(F(A_{1})-F(A_{2}))mod12$
\end_inset

.
 A continuación se muestra una tabla para la que se ha resuelto el problema,
 lo que corresponde al ciclo de quintas e incluye datos sobre los intervalos
 clásicos que suenan.
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="13">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $d$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $D_{f}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Tabla de distancias
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
La segunda restricción consiste en minimizar 
\begin_inset Formula $D_{f}$
\end_inset

 entre dos acordes consecutivos, que se escribe como el procedimiento: 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $Min\; D_{f}(\{V_{i}\}\cup\{V_{prev-voix(j)},\, j\neq voix(i)\},\{V_{i+1}\}\cup\{V_{prev-voix(j)},\, j\neq voix(i+1)\})$
\end_inset


\end_layout

\begin_layout Paragraph
Tercera Restricción:
\end_layout

\begin_layout Plain Layout
La última restricción está dada por el compositor en la estructura melódica
 del problema.
 Hay que fomentar un perfil melódico dado el mismo para todas las voces,
 de la misma forma que el canon rítmico.
 
\end_layout

\begin_layout Plain Layout
Se fija un perfil en valores medio 
\begin_inset Formula $p_{1}...p_{m}$
\end_inset

, siendo 
\begin_inset Formula $m$
\end_inset

 el numero de ataques de una voz.
 Este perfil esta dado en intervalos.
 
\begin_inset Formula $p_{k}$
\end_inset

 es el intervalo del perfil en el 
\begin_inset Formula $k$
\end_inset

-esimo cambio de notas de la voz considerada.
 
\end_layout

\begin_layout Plain Layout
Para escribir la restricción, lo que necesitamos saber acerca de un tiempo
 i, el primer índice de la voz que cambia dada por 
\begin_inset Formula $voix(i)$
\end_inset

, y el numero de veces que esa voz ha cambiado.
 Para simplificar, se hace un cambio en los índices 
\begin_inset Formula $p_{1}...p_{m}$
\end_inset

 a través de todas las voces, teniendo en cuenta el desplazamiento inicial
 y teniendo en cuenta que por cada pulso 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $p'(i)$
\end_inset

 es el intervalo de espera el perfil del pulso 
\begin_inset Formula $i$
\end_inset

.
 esta restricción se escribe: 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $\forall i\leq n,\; V_{i}-V_{prev-voix(i)}=p'(i)$
\end_inset


\end_layout

\begin_layout Plain Layout
Esta definición no es muy satisfactoria, puesto que no especifica la distancia
 utilizada, que es una clave musical.
 Para soluciones exactas, no importa, que las soluciones también sean necesariam
ente aproximadas (ver mas adelante).
 Musicalmente es más pertinente para reemplazar una reducción al mínimo
 de restricción, donde la distancia utilizada es la diferencia absoluta,
 lo que garantiza un mejor "ajuste" para el mejor perfil posible.
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $\forall i\leq n,\; Min\,\sum_{j\leq m}\,\mid V_{j}-V_{prev-voix(j)}-p'(j)\mid$
\end_inset


\end_layout

\begin_layout Paragraph
Ajuste de Restricciones: 
\end_layout

\begin_layout Plain Layout
Este es un ejemplo típico de las dificultades en la formalización de un
 CSP musical.
 La restricción Estrada impone soluciones semi-triviales: cancelar 
\begin_inset Formula $E$
\end_inset

 entre dos acordes 
\begin_inset Formula $A_{1}$
\end_inset

 y 
\begin_inset Formula $A_{2}$
\end_inset

, debido a que 
\begin_inset Formula $A_{1}$
\end_inset

 y 
\begin_inset Formula $A_{2}$
\end_inset

 tienen los mismos intervalos.
 
\end_layout

\begin_layout Plain Layout
Suponga que 
\begin_inset Formula $A_{1}$
\end_inset

 y 
\begin_inset Formula $A_{2}$
\end_inset

 tienen el mismo numero de notas verdaderas (sin repetición).
 Si nos situamos en un rango vocal de octava para eliminar las transposiciones,
 y que conserva el orden de los intervalos, podemos dibujar la textura en
 un círculo de doce unidades.
 
\end_layout

\begin_layout Plain Layout
Vemos entonces que la restricción de Estrada está de vuelta para mantener
 la misma nota, es cambiar dos intervalos, es decir, dos posibilidades para
 la nota variable.
 En una gama más amplia vocales, agregar la transposición de estas dos posibilid
ades.
 Tenga en cuenta que la nota diferente entre 
\begin_inset Formula $A_{1}$
\end_inset

 y 
\begin_inset Formula $A_{2}$
\end_inset

 es casi fijo, y esto con una de las tres restricciones.
 
\end_layout

\begin_layout Plain Layout
En la práctica, se obtienen soluciones constantes (la misma nota todo el
 texto) o la transposición de octava, que no tiene ningún interés.
 Por lo tanto hay que añadir las restricciones para evitar soluciones triviales
 y buscar soluciones aproximadas.
 Usted puede reclamar ya sea una melodía "verdadera", con las notas sucesivas
 de una voz completamente diferente, una "verdadera" armonía, con las 
\begin_inset Formula $k$
\end_inset

 notas diferentes tocadas simultaneamente.
 
\end_layout

\begin_layout Plain Layout
La segunda solución es doblemente mala: hace que se convierta en un problema
 sobre-restringido.
 Desde un punto de vista musical, no tiene mucho sentido, por ejemplo, cuando
 hay 12 voces.
 Por el contrario, la primera solución es mucho mejor.
 
\end_layout

\begin_layout Plain Layout
Se impone una restricción muy simple, que musicalmente, requiere que cada
 instrumento tenga una "verdadera" melodía.
 Por lo tanto se agrega la restricción
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $V_{prev-voix(i)}\neq V_{i}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Resumen del Modelamiento
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Datos: 
\begin_inset Formula $d_{i}$
\end_inset

 turnos de entrada de voces, las funciones 
\begin_inset Formula $voix$
\end_inset

, 
\begin_inset Formula $prev-voix$
\end_inset

 y 
\begin_inset Formula $next-voix$
\end_inset

 para generar los índices de las voces, Distancias Estrada 
\emph on

\begin_inset Formula $E$
\end_inset


\emph default
, distancias entre las fundamentales virtuales 
\begin_inset Formula $D_{f}$
\end_inset

, un perfil melódico 
\begin_inset Formula $p_{i}$
\end_inset

 dado en intervalos.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Variables: 
\begin_inset Formula $V_{1},...,V_{n}$
\end_inset

 (notas)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Dominio: 
\begin_inset Formula $\mathbb{Z}^{+}$
\end_inset

(múltiplos de doce)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Restricciones: Sea 
\begin_inset Formula $A_{i}=\{V_{i},\; V_{prev-voix(j)},\; j\neq voix(i)\}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $Min\; E(A_{i},\, A_{i+1})$
\end_inset

 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Variaciones:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{1}$
\end_inset

 
\begin_inset Formula $Min\; E(A_{i},\, A)$
\end_inset

 para un acorde 
\begin_inset Formula $A$
\end_inset

 fijo
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{2}$
\end_inset

 
\begin_inset Formula $Min\; D_{f}(A_{i},\, A_{i+1})$
\end_inset

 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{3}$
\end_inset

 
\begin_inset Formula $Min\;\sum_{j\leq k}\mid V_{j+d_{i}}-p_{j}\mid$
\end_inset

 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{4}$
\end_inset

 
\begin_inset Formula $V_{prev-voix(i)}\neq V_{i}$
\end_inset

 (preferencia)
\end_layout

\begin_layout Subsection
Primer Tipo de Contrapunto Fuxiano
\end_layout

\begin_layout Standard
Este tipo de contrapunto definido en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-35"

\end_inset

, y formalizado en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-34"

\end_inset

consiste en encontrar una melodia que armonice una melodia dada.
 Dentro de las caracteristicas de este tipo de contrapunto tenemos que la
 duración de las notas y el numero de las notas de la melodia dada (
\emph on
Cantus Firmus
\emph default
) y la melodia buscada (
\emph on
Counterpoint
\emph default
 o 
\emph on
Contrapunto
\emph default
) son iguales.
 Un ejemplo de este tipo de contrapunto se muestra en la figura 3.7.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/02-Fuxian-firstSpecies-Counterpoint.preview.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Ejemplo del primer tipo de contrapunto fuxiano
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Formalmente tenemos que: 
\end_layout

\begin_layout Standard
sea 
\begin_inset Formula $F=\{f_{1},f_{2},...,f_{n}\}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
los valores de 
\begin_inset Formula $V_{i}$
\end_inset

 se pueden dar en MIDI
\end_layout

\end_inset

 se desea encontrar un conjunto 
\begin_inset Formula $C=\{c_{1},c_{2},...,c_{n}\}$
\end_inset

 tal que: 
\end_layout

\begin_layout Enumerate
El 
\emph on
intervalo melodico
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
el intervalo melodico es aque en el que las notas se tocan de forma sucesiva.
\end_layout

\end_inset


\emph default
 entre 
\begin_inset Formula $f_{i}$
\end_inset

 y 
\begin_inset Formula $c_{i}$
\end_inset

 esta permitido hasta la cuarta, la quinta y la octava, es decir, 
\begin_inset Formula $\forall i<n\;\Vert f_{i}-c_{i}\Vert\in\{1,2,3,4,5,7\}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Solo se permiten valores 
\emph on
diatonicos
\emph default
 (no se permiten intervalos aumentados, disminuidos o cromaticos), es decir,
 
\begin_inset Formula $\forall i<n-1\;\Vert c_{i}-c_{i+1}\Vert\in\{1,2\}$
\end_inset

.
\end_layout

\begin_layout Enumerate
se prohibe la repetición de la nota, es decir
\begin_inset Formula $c_{i}\neq f_{i}\;\forall c_{i}\in C$
\end_inset

.
\end_layout

\begin_layout Paragraph
Resumen del Modelamiento
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Datos: El cantus firmus 
\begin_inset Formula $F=\{f_{1},f_{2},...,f_{n}\}$
\end_inset

 de 
\begin_inset Formula $n$
\end_inset

 notas
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Variables: 
\begin_inset Formula $C=\{c_{1},...,c_{n}\}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Dominio: 
\begin_inset Formula $Z=\{0,2,4,5,7,9,11\}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Restricciones: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{1}$
\end_inset

 
\begin_inset Formula $\forall i<n\;\Vert f_{i}-c_{i}\Vert\in\{1,2,3,4,5,7\}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{2}$
\end_inset

 
\begin_inset Formula $\forall i<n\;\Vert f_{i}-c_{i}\Vert\in\{1,2\}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C_{3}$
\end_inset

 
\begin_inset Formula $c_{i}\neq f_{i}\;\forall c_{i}\in C$
\end_inset


\end_layout

\begin_layout Section
Librerias de Programación por Restricciones
\end_layout

\begin_layout Subsection
Gecode
\end_layout

\begin_layout Standard
El ambiente de programación de restricciones Gecode fue diseñado utilizando
 el paradigma orientado a objetos.
\begin_inset space ~
\end_inset

El modelo de propagación utilizado por Gecode es centrado en los propagadores;
 en este modelo los propagadores son planificados y ejecutados.
\begin_inset space ~
\end_inset

Una desventaja del anterior modelo radica en que tiene un costo alto mantener
 información completa sobre los cambios hechos en el dominio de las variables
 modificadas; por el contrario,  otros sistemas de restricciones utilizan
 un modelo propagación centrado en las variables.
 En éste la propagación se basa en planificar las variables modificadas,
 donde el costo de almacenar  información completa de las modificaciones
 hechas al dominio de las variables es bajo.
\end_layout

\begin_layout Standard
Una vista gráfica general Gecode 3.5.0 es proporcionada en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-10"

\end_inset

.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
; la siguiente es la lista completa de tareas que se pueden realizar en
 Gecode 3.5.0:
\end_layout

\begin_layout Itemize
Programación de modelos.
\end_layout

\begin_layout Itemize
Programación de motores de búsqueda.
\end_layout

\begin_layout Itemize
Programación de propagadores y estrategias de distribución.
\end_layout

\begin_layout Itemize
Programación de variables.
\end_layout

\begin_layout Itemize
Programación de vistas.
\end_layout

\begin_layout Itemize
Pruebas.
\end_layout

\begin_layout Itemize
Reflexión y serialización.
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Dependiendo de la tarea que se desee realizar en Gecode se trabaja con un
 componente distinto.
\begin_inset space ~
\end_inset

En la siguiente lista están los componentes principales de Gecode 3.5.0:
\end_layout

\begin_layout Subsubsection

\series bold
Modelos y variables
\end_layout

\begin_layout Standard
La programación de un CSP en Gecode 3.5.0 va de la mano de la utilización
 de objetos variable.
 Las variables son clases disponibles al usuario final para que lleve a
 cabo el modelamiento del problema.
\end_layout

\begin_layout Standard
Si se desea programar un CSP en Gecode 3.5.0 se debe hacer:
\end_layout

\begin_layout Itemize
Crear una clase para modelar el problema la cual debe de extender de la
 clase Space de Gecode.
\end_layout

\begin_layout Itemize
Declarar las variables (los objetos variables permiten declarar un dominio
 inicial,  fijar restricciones sobre estas y consultar el estado de su dominio)
 del CSP y su respectivo dominio.
\end_layout

\begin_layout Itemize
Especificar las restricciones y relaciones entre las variables declaradas
 en el punto anterior
\end_layout

\begin_layout Itemize
Especificar la estrategia de distribución que desea aplicar para la solución
 del problema.
 
\end_layout

\begin_layout Itemize
Definir un constructor de copia (Gecode 3.5.0 explora bajo copying) 
\end_layout

\begin_layout Itemize
Crear una instancia de la clase Options de Gecode 3.5.0 e indicar cuantas
 iteraciones desea realizar en el proceso de búsqueda u otras opciones de
 configuración pertinentes al problema
\end_layout

\begin_layout Itemize
Crear una instancia de la clase que modela el problema.
 
\end_layout

\begin_layout Itemize
Pasar esta instancia a uno de los motores de busqueda definidos.
 
\end_layout

\begin_layout Standard

\series bold
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2.
 Vistas e implementación de variable
\end_layout

\begin_layout Plain Layout
Las vistas a diferencia de las variables, son clases no disponibles directamente
 al usuario final que modela problemas de restricciones,  sino a las personas
 que se encargan de implementar nuevas variables y dominios en Gecode.
 Las vistas e implementaciónes de variable describen la funcionalidad interna
 de una variable que usa el usuario.
 La variable no implementa métodos,  es simplemente una interfaz que esconde
 al usuario final métodos que le permitirían manipular directamente el dominio
 de una variable.
 El siguiente gráfico  presenta una vista general de cómo encajan las vistas,
  variables e implementación de variables en Gecode 3.5.0:
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/vistasyvar.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Vistas y Variables en Gecode 
\begin_inset CommandInset citation
LatexCommand cite
key "key-13"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Para llevar a cabo el corte del dominio de una variable,  el propagador
 tiene dos opciones que son o usar un objeto implementación de variable
 de aquí en adelante llamado varimp o un objeto vista de aquí en adelante
 llamado vista.
\end_layout

\begin_layout Plain Layout
Un varimp proporciona métodos para consultar y actualizar el dominio de
 una variable.Una vista tiene una referencia a una varimp pero adicionalmente
 proporciona métodos para transformar la entrada del propagador (el dominio
 de la variable) y para transformar la salida que este genera.
\end_layout

\begin_layout Plain Layout
Si por ejemplo se implementara un propagador para la restricción  
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Esta parte esta muy especifica.
 Me parece que se pueden omitir algunos detalles.
\end_layout

\end_inset


\begin_inset Formula $\left[Max\left\{ x_{1},.....,x_{n}\right\} =y\right]$
\end_inset

  y se deseara implementar también otro propagador para la restricción 
\begin_inset Formula $\left[Min\left\{ x_{1},......,x_{n}\right\} \right]$
\end_inset

 usando varimp habría que tener dos propagadores, cada uno con una referencia
 a una varimp distinta.
\begin_inset space ~
\end_inset

Esto dado el ligero cambio en la restricción el cual genera un cambio en
 los tells que maneja cada varimp,  pero estas dos restricciones están relaciona
das por la equivalencia:
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\left[Min\left\{ x_{1},......,x_{n}\right\} \right]$
\end_inset

 =
\begin_inset Formula $\left[Max\left\{ -x_{1},.....,-x_{n}\right\} =-y\right]$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Para resolver este problema de redundancia de código,  se introdujeron las
 vistas; la idea es que las vistas adecuen la entrada y salida para el propagado
r.
\begin_inset space ~
\end_inset

El problema anterior visto desde el enfoque de las vistas se podría resolver
 usando un clase propagadorA que recibe al ser instanciada una referencia
 a una vista A para la restricción Max y un clase propagadorA que recibe
 al ser instanciada una referencia a una vista B la cual adecúa la entrada
 y salida para éste; este propagador se denomina derivado,  a nivel de programac
ión esto se logra usando lo que se denomina parametricidad.
\begin_inset space ~
\end_inset

La abstracción de parametricidad a través de tipos permite que el mismo
 código pueda ser instanciado con diferentes parámetros de tipos compatibles
 (el mismo propagador será instanciado con distintas vistas).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
En Gecode existen variables como IntVar, SetVar y de forma equivalente existen
 IntView,  SetView.
 
\end_layout

\begin_layout Plain Layout
IntVar, SetVar están disponibles a los usuarios para el modelamiento,  mientras
 las segundas (IntView,  SetView) están disponibles a los desarrolladores
 en Gecode.
\end_layout

\begin_layout Plain Layout
El cuerpo de una vista está compuesto de:
\end_layout

\begin_layout Itemize

\series bold
Métodos de acceso:
\series default
 permiten ver el estado del dominio actual,  permiten iterar sobre los valores
 del mismo y responder inquietudes sobre valores del dominio e.g Métodos
 para acceder el máximo valor del dominio,  el tamaño del dominio,  la distancia
 entre el valor más pequeño del dominio y el más grande del dominio.
\end_layout

\begin_layout Itemize

\series bold
Pruebas de dominio
\series default
: métodos que retornan true o false y que normalmente es el resultado de
 alguna búsqueda,  e.g probar si un número se encuentra dentro del dominio.
\end_layout

\begin_layout Itemize

\series bold
Tells
\series default
: permiten modificar el dominio actual de una Variable y retornan siempre
 un ModEvent.
 e.g métodos para restringir que el dominio sea menor o igual a un número.
\end_layout

\begin_layout Itemize

\series bold
Tells con iteradores
\series default
: tienen la misma función que los anteriores Tell,  solo que el recorte
 de dominio se realiza con un iterador,  el cual tiene una función interna
 que evalúa cada valor del dominio evaluando si el valor es parte o no del
 dominio.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\series bold
Motores de búsqueda y espacio
\end_layout

\begin_layout Standard
El encargado de encontrar las soluciones a un CSP en Gecode es el motor
 de búsqueda; este tiene 2 tareas que son: encontrar todas las soluciones
 al CSP y garantizar la correctitud de estas soluciones.
\begin_inset space ~
\end_inset

Para esto el motor de búsqueda utiliza dos técnicas que son la búsqueda
 y la inferencia;  la búsqueda (implementada con 
\emph on
la estrategia de distribución
\emph default
) asegura encontrar todas las soluciones al CSP,  la inferencia (implementada
 con 
\emph on
propagadores
\emph default
) asegura que cada solución cumpla las restricciones del CSP.
\end_layout

\begin_layout Standard
Durante la búsqueda de las soluciones a un CSP el motor de búsqueda genera
 un árbol de búsqueda.
\begin_inset space ~
\end_inset

 Un nodo en el árbol de búsqueda representa un punto fijo (una foto del
 sistema en ejecución) calculado por la propagación,  este punto fijo se
 denomina un espacio.
\begin_inset space ~
\end_inset

Cada espacio se caracteriza por tener:
\end_layout

\begin_layout Itemize
Cola de propagadores: indica cuales propagadores deben ser corridos.
\end_layout

\begin_layout Itemize
Cola de estrategias de búsqueda.
\end_layout

\begin_layout Itemize
Dominios de variables.
\end_layout

\begin_layout Itemize
SpaceStatus.
\end_layout

\begin_layout Standard
El SpaceStatus de un espacio representa el estado del espacio actual,  el
 cual puede ser: una solución al CSP,  no ser una solución al CSP (por ejemplo
 una variable es vacía) o puede contener variables no asignadas (en el caso
 de variables enteras,  variables con más de un valor),  a nivel de implementaci
ón esto es:
\end_layout

\begin_layout Itemize

\series bold
SS_SOLVED
\series default
: Ningún propagador retorno ES_FAILED y ninguna distribución es permitida.
\end_layout

\begin_layout Itemize

\series bold
SS_FAILED
\series default
: Un propagador retornado es fallido.
\end_layout

\begin_layout Itemize

\series bold
SS_BRANCHED
\series default
: haga distribución,  ya que las variables no están asignadas y el propagador
 no retorno falla así que pueden haber soluciones al CSP.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Algo importante sobre un espacio es que al tomar su estado SS_FAILED,  se
 requiere restaurar este a el estado anterior para continuar con la búsqueda,
  para esto se utilizan los métodos:
\end_layout

\begin_layout Itemize
status()
\end_layout

\begin_layout Itemize
clone(share)
\end_layout

\begin_layout Itemize
commit(desc, a)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para profundizar en como Gecode utiliza un espacio se puede consultar 
\begin_inset CommandInset citation
LatexCommand cite
key "key-11"

\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection

\series bold
Propagador,  condición de propagación y evento de modificación
\end_layout

\begin_layout Standard
Un propagador es una abstracción la cual brinda la implementación de una
 restricción.Un propagador a nivel conceptual está representado por unas
 reglas de filtrado; estas reglas de filtrado reflejan la forma en que el
 propagador va a podar los dominios de las variables y deben garantizar
 la correctitud del propagador,  es decir,  que genera las soluciones correctas
 a la restricción.
\begin_inset space ~
\end_inset

En Gecode se pueden implementar nuevos propagadores que apliquen a las variables
 por defecto de Gecode,  pero también para variables "nuevas
\begin_inset Quotes erd
\end_inset

,  creadas a partir de las variables por defecto de Gecode.
\begin_inset space ~
\end_inset

Cada propagador retorna un Status que indica al estado actual que ocurrió
 durante la propagación.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Desde el punto de vista del número de restricciones que toman los propagadores,
  los propagadores de Gecode se pueden clasificar en:
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Cambio sugerido por orlando : 
\begin_inset Quotes eld
\end_inset

quitar los tipos de propagadores que no estan en cpgraph
\begin_inset Quotes erd
\end_inset

, entonces :Cambie la linea que estaba , es decir, 
\begin_inset Quotes eld
\end_inset

Desde el punto de vista del número de restricciones que toman los propagadores,
 los propagadores que Gecode proporcionan se pueden clasificar en:
\begin_inset Quotes erd
\end_inset

, por -> Desde el punto de vista del número de restricciones que toman los
 propagadores, los propagadores de Gecode que CP(Graph) usa , se pueden
 clasificar en: 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
UnaryPropagators
\series default
: Se refieren a restricciones de una sola variable,  e.g Sea X una variable
 entera,  la restricción X>3 es una restricción unaria pues implica una
 sola variable de restricciones.
\end_layout

\begin_layout Itemize

\series bold
BinaryPropagators
\series default
: Se refieren a restricciones que involucran dos variables e.g: X && Y=0
 donde X, Y son variables del dominio de los booleanos
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Teniendo lo anterior claro,  se tienen en Gecode para los tipos de propagadores
 mencionados, clases de las cuales se puede extender (Heredar) de acuerdo
 al propagador que se desee implementar.
 Se debe tener en cuenta que todos los propagadores de Gecode heredan de
 la clase Propagator.
 
\end_layout

\begin_layout Plain Layout
Un propagador P depende de una vista X (Variable sobre la cual aplica la
 restriccion) con una 
\emph on
Condición De Propagación
\emph default
 PC y es llamado (encolado para su ejecución) cuando una actualización de
 dominio sobre X retorne un evento de modificación que sea el evento que
 encaja en la Condición de Propagación.
 Las siguientes son las Condiciones de Propagación que Gecode incluye por
 defecto:
\end_layout

\begin_layout Itemize

\shape italic
PC_INT_VAL
\shape default
 Indica que el propagador será corrido cuando se realicen asignaciones de
 valor
\end_layout

\begin_layout Itemize

\shape italic
PC_INT_BND
\shape default
 Indica que el propagador será corrido cuando se realicen cambios sobre
 las cotas superiores e inferiores de la variable.
\end_layout

\begin_layout Itemize

\shape italic
PC_INT_DOM 
\shape default
Indica que el propagador será corrido cuando se realicen cambios de cualquier
 tipo sobre la variable.
\end_layout

\begin_layout Plain Layout
Durante la aplicación de las reglas de podado de dominio dentro del propagador,
  se le tendrá que decir a una variable que asigne su cota superior a un
 determinado valor o que su cota inferior sea modificado a un valor determinado;
 estas funciones que modifican el dominio de una variable se llaman "Tells"
 dentro de la jerga de Gecode.
 Como regla en Gecode,  siempre que se haga un llamado a un Tell se tendrá
 que revisar si el Tell ha retornado un valor diferente de fallo,  para
 que en caso de fallo Gecode se encargue de determinar que el problema no
 tiene solución.
 Los propagadores manejan el failure (cuando el dominio de una variable
 es vacío) y controlan la propagación [1].
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Un Propagador puede retornar:
\end_layout

\begin_layout Itemize

\series bold
ES_FAILED
\series default
: Indica que el propagador ha fallado y que el espacio debe por tanto fallar
\end_layout

\begin_layout Itemize

\series bold
ES_SUBSUMED
\series default
: Indica que el propagador no realizara más cambios al dominio durante el
 resto del CSP y por tanto el objeto puede ser destruido.
\end_layout

\begin_layout Itemize

\series bold
ES_FIX
\series default
: Indica que en el Espacio actual correr el propagador nuevamente no realizara
 ninguna poda en el dominio de las variables
\end_layout

\begin_layout Itemize

\series bold
ES_NOFIX
\series default
: Indica que el propagador no ha alcanzado un punto fijo y que en caso de
 que su PC se cumpla,  entonces debe ser encolado nuevamente.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
5
\series default
.
\series bold

\begin_inset space ~
\end_inset

Iterador
\series default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Un iterador proporciona acceso a los elementos de una colección en un orden
 secuencial,  uno al tiempo
\begin_inset CommandInset citation
LatexCommand cite
key "key-17"

\end_inset

.En Gecode existen dos iteradores los cuales permiten acceder los elementos
 del dominio de una variable: 
\begin_inset space ~
\end_inset

 el iterador de valor permite acceder elemento por elemento del dominio
 de la variable y el iterador de rango que permite acceder una secuencia
 de rangos obtenida del dominio de la variable.
\begin_inset space ~
\end_inset

Por ejemplo, para el conjunto de valores enteros 
\begin_inset Formula $s=\left\{ 1,2,4,5,7\right\} $
\end_inset

 el iterador de valor permitiría acceder a 1, 2, 4, 5, 7 pero el iterador
 de rango permitirá acceder a los rangos,  es decir,  <
\begin_inset Formula $\left[1,2\right]\left[4,5\right]$
\end_inset


\begin_inset Formula $\left[7\right]$
\end_inset

>,  en este caso son 3 rangos y el iterador de rango avanzara sobre cada
 rango y solo permite hallar el mayor y menor de cada rango más no iterar
 sobre cada elemento dentro del rango.
\end_layout

\begin_layout Plain Layout
Algunas veces se requiere de que un Tell haga por ejemplo un recorte de
 dominio sobre más de un valor,  se requiere incluir varios valores dentro
 del dominio de la variable,  o se requiere de métodos de acceso al dominio
 que devuelven mas de un valor; en estos casos se usan los iteradores para
 almacenar esos valores del dominio o para realizar un Tell precisamente
 sobre esos valores del dominio.
 
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\series bold
Estrategias de distribución 
\end_layout

\begin_layout Standard
La estrategia de distribución hace parte de la búsqueda de la solución a
 un CSP; ésta determina la forma la forma del árbol de búsqueda escogiendo
 la próxima variable y valor a distribuir.
\end_layout

\begin_layout Standard
La búsqueda de la solución comienza con los propagadores,  una vez los propagado
res han alcanzado un punto fijo,  el proceso de distribución comienza.En
 este punto existen tres posibilidades:
\end_layout

\begin_layout Itemize
Todas las variables del CSP están asignadas.En este caso la búsqueda se detiene
 ya que una solución se ha obtenido.
\end_layout

\begin_layout Itemize
Existen variables que todavía no están asignadas.En este caso,  se realiza
 un nuevo paso de distribución.Un paso de distribución consiste de:
\end_layout

\begin_deeper
\begin_layout Enumerate
Seleccionar próxima variable a explorar.
\end_layout

\begin_layout Enumerate
Seleccionar el valor (alternativa) de la variable escogida.
 
\end_layout

\end_deeper
\begin_layout Standard
Una vez esta selección se ha hecho,  se agrega la correspondiente restricción
 al almacén .Esta adición de restricción posiblemente active algunos propagadores
,  así que se debe esperar hasta que todos los propagadores queden fijos
 para realizar una nueva iteración de distribución.
\end_layout

\begin_layout Standard
Si hay al menos una variable cuyo dominio es vacío,  en este caso,  se vuelve
 al estado anterior,  y se prueba una alternativa distinta esperando por
 la estabilización de los propagadores (que alcancen un punto fijo).
\end_layout

\begin_layout Subsection
Strasheela
\end_layout

\begin_layout Standard
Strasheela es un sistema de restricciones musicales generico
\begin_inset CommandInset citation
LatexCommand cite
key "key-34"

\end_inset

 altamente programable y extensible.
 Strasheela soporta CSP´s musicales que son extremadamente dificiles o imposible
s de resolver en sistemas anteriores.
\begin_inset Newline newline
\end_inset

Strasheela emplea un modelo de restricciones basado en espacios computacionales,
 adaptando este enfoque a los CSP´s musicales, y utulizando una representación
 generica muy poderosa, que ha sido diseñada especificamente para definir
 CSP´s musicales complejos.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Estrategia de Busqueda
\end_layout

\begin_layout Standard
Los espacios computacionales que emplea Strasheela encapsulan calculos basados
 en restricciones (los cuales son calculos especulativos), lo que hace que
 este modelo sea programable a un alto nivel.
 Al ser adaptado a la programación por restricciones de música, este modelo
 elimina muchos de los problemas de rendimiento de sistemas anteriores y
 hace posible la resolución de CSP's musicales que eran demasiado complejos
 para otros sistemas.
\end_layout

\begin_layout Subsubsection
Propagación y Busqueda
\end_layout

\begin_layout Standard
El modelo de restricciones basado en espacios soporta un enfoque de busqueda
 llamado 
\emph on
propagar y buscar 
\emph default
(tambien conocido como propagar y distribuir).
 Algunas de las caracteristicas de este enfoque son: 
\end_layout

\begin_layout Itemize
Este enfoque mantiene información parcial del estado de los dominios de
 las variables.
\end_layout

\begin_layout Itemize

\emph on
Propagar y buscar 
\emph default
realiza deducciones locales (por ejemplo propagación de restricciones).
\end_layout

\begin_layout Itemize

\emph on
Propagar y buscar 
\emph default
soporta procesos de busqueda programados.
 En un momento en el que no se puedan realizar deducciones locales, el motor
 de busqueda debe tomar una decisión.
 Para realizar un proceso de busqueda eficiente, es de vital importancia
 tomar decisiones donde una solución sea encontrada principalmente por deduccion
es locales.
 Este enfoque reduce el riesgo de tomar 
\begin_inset Quotes eld
\end_inset

malas decisiones
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Busqueda de Partituras (cifrados)
\end_layout

\begin_layout Standard
Strasheela adapta el modelo general basado en espacios a programación por
 restricciones de problemas musicales.
 El diseño de la representación musical de Strasheela le permite al proceso
 de desición aprovechar plenamente una partitura parcial (es decir, toda
 la información disponible de la representación musical) mientras se está
 tomando una decisión.
 Por lo tanto, decisiones adecuadas se pueden calcular de forma automática
 durante la busqueda de una partitura solución.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
en esta parte seria conveniente dar un ejemplo??
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
OMClouds
\end_layout

\begin_layout Standard
Como se define en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

OMClouds es una libreria para programación por restricciones incluida en
 OpenMusic, una herramienta para composición asistida por computador (CAC)
 que implementa un paradigma grafico de programación.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Criterios de Diseño
\end_layout

\begin_layout Standard
Durante el proceso de diseño de OMClouds, se estudiaron docenas de CSP's
 musicales, y de las conclusiones de este estudio, se determino que: 
\end_layout

\begin_layout Enumerate
Es importante notar el gran numero de estructuras musicales que deben ser
 modeladas: acordes, notas, ritmos, tempo, armonias, movimientos, etc.
 Desde un punto de vista computacional, estas son variables de dominio finito,
 pero desde un punto de vista musical, significa que OMClouds debe estar
 en capacidad de representar cualquier tipo de objetos musicales.
 En algunos casos, las variables pueden representar directamente objetos
 musicales, en otros, se encuentran a lo largo de la partitura y se requiere
 un calculo para pasar de las variables al objeto musical.
 Por este motivo, no se le da un significado musical a las variables en
 OMClouds, simplemente se consideran como enteros que deben ser transformados
 a partir de las especificaciones del usuario.
\end_layout

\begin_layout Enumerate
Las restricciones son muy variadas.
 Se deben manejar restricciones aritmeticas, pero tambien restricciones
 de alto nivel como restricciones de capacidad o cardinalidad.
 Debido a esto, no hay forma de optimizar el solver para cualquier tipo
 de restricciones en una aplicación de composición musical.
\end_layout

\begin_layout Enumerate
Dado que los CSP's musicales muchas veces estan sobrerestringidos, la meta
 de OMClouds es encontrar soluciones aproximadas con sentido musical.
\end_layout

\begin_layout Subsubsection
Busqueda Adaptativa
\end_layout

\begin_layout Standard
Los metodos heuristicos han sido usados en problemas de 
\emph on
Optimización Combinatoria 
\emph default
para encontrar soluciones optimas o cercanas a la optima durante decadas.
 El algoritmo basico consiste en empezar en una configuración aleatoria,
 explorar el vecindario (configuraciones adyacentes a la seleccionada),
 seleccionar la mejor de estas configuraciones y moverse a esta configuración;
 este proceso se repite hasta que se encuentra una solución adecuada al
 problema.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La 
\emph on
busqueda adaptativa 
\emph default
es un metodo heuristico propuesto por Philippe Codognet y Daniel Diaz para
 resolver CSP's.
 La entrada de este metodo es un problema en formato CSP.
 En este metodo se aprovecha la formulación del problema como un CSP, analizando
 cuidadosamente la configuración actual de las variables y restricciones,
 en comparación con una función de costo global a ser optimizado.
\begin_inset Newline newline
\end_inset

Este metodo no esta limitado a un tipo especifico de restricción, ya que
 para cada restricción, se calcula una 
\emph on
función de error 
\emph default
que dá un indicador de 
\begin_inset Quotes eld
\end_inset

por cuanto
\begin_inset Quotes erd
\end_inset

 se esta violando esa restricción.
 La idea basica es calcular la 
\emph on
función de error 
\emph default
de cada restricción, entonces se combina para cada variable el error de
 todas las restricciones en las que aparece,
\emph on
 
\emph default
lo que proyecta los errores de las restricciones en las variables involucradas.
 Finalmente, la variable con con el error mas grande, es seleccionado como
 
\begin_inset Quotes eld
\end_inset

culpable
\begin_inset Quotes erd
\end_inset

 y su valor es modificado.
 En este segundo paso, se selecciona el mejor valor del dominio de la variable,
 es decir, se selecciona el valor que minimice el error total de la variable
 en la configuración resultante.
\begin_inset Foot
status open

\begin_layout Plain Layout
en esta parte resulta relevante hablar sobre como este metodo evita los
 minimos locales??
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Section
Cambios Detectados 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\lang english
Cambie el titulo 
\begin_inset Quotes eld
\end_inset

cambios detectados a nivel general
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
En esta sección se mencionan los cambios detectados entre Gecode 1.0.0 y Gecode
 2.1.1 que hacen que CP(Graph) no funcione en Gecode 2.1.1.
\end_layout

\begin_layout Subsection
Algoritmo de Propagación
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Aquí debería incluirse la imagen de el algoritmo de la propagación orientada
 a variables y el algoritmo del orientado a propagadores
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Como se ha mencionado en las secciones anteriores existen dos tipos de 
\begin_inset Quotes eld
\end_inset


\shape italic
propagación
\shape default

\begin_inset Quotes erd
\end_inset

, propagación orientada en propagadores y propagación orientada en las variables.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Propagación Orientada en los propagadores
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
El algoritmo de propagación de Gecode es orientado en los propagadores,
 lo que significa que los propagadores que aun no han alcanzado un punto
 fijo son encolados para su ejecución en cada espacio.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Propagación Orientada en las variables
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
La propagación orientada en las variables, no tiene una cola de los propagadores
, sino de las variables cuyo dominio ha sido modificado; durante cada ejecución
 se correrán aquellos propagadores que están subscritos a esas variables.
\end_layout

\begin_layout Plain Layout
La propagación orientada a las variables tiene ventajas sobre la propagación
 orientada en propagadores pues durante la propagación se puede saber exactament
e qué variable fue la que invoco el propagador, y además se puede saber
 cuál fue el cambio en el dominio de esa variable.
 Esto permite hacer que el propagador cada vez que realiza su propagación
 no empiece a calcular desde cero (
\shape italic
Propagación Incremental
\shape default
).
\end_layout

\begin_layout Plain Layout
\begin_inset Newpage newpage
\end_inset

Por ejemplo, Supóngase que se tiene un propagador: 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $z=\underset{}{\overset{k}{\underset{i=1}{\sum}x_{i}}}$
\end_inset


\end_layout

\begin_layout Plain Layout
En propagación orientada a las variables, cada vez que el propagador sea
 ejecutado, sabría exactamente cual variable 
\begin_inset Formula $x_{l}$
\end_inset

 cambio y cual fue cambio en el dominio de la variable de 
\begin_inset Formula $x_{l}$
\end_inset

.
 Normalmente en este propagador el valor de la banda inferior de Z es la
 suma de las bandas inferiores de cada 
\begin_inset Formula $x_{i}$
\end_inset

, en este caso para saber el nuevo valor de la banda inferior de Z solo
 se tendría que hacer la diferencia entre el dominio nuevo y antiguo dominio
 de 
\begin_inset Formula $x_{l}$
\end_inset

.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

En Gecode 2.0.0, se agrego un nuevo componente llamado 
\shape italic
Asesor 
\shape default
para permitir a la propagación orientada a los propagadores realizar propagación
 Incremental.
 Este cambio introdujo algunas modificaciones al algoritmo de ejecución
 de Gecode.
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset


\end_layout

\begin_layout Plain Layout
El cambio del algoritmo de propagación tuvo impacto en la forma como se
 programan los Propagadores y las Views.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection*
Algoritmo de Propagación Gecode 1.0.0
\end_layout

\begin_layout Plain Layout
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/algoritmoGecode1.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Algoritmo de Propagación Centrado en los Propagadores (Gecode 1)
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $P$
\end_inset

 es una cola donde se encuentran los propagadores que deben ser corridos,
 
\begin_inset Formula $S$
\end_inset

 es un store donde se almacenan las variables y sus dominios.
 El algoritmo consiste de un ciclo que se mantiene mientras existan propagadores
 en la cola.
 Cada propagador 
\begin_inset Formula $p$
\end_inset

 dentro de 
\begin_inset Formula $P$
\end_inset

 tiene un estado representado por la instrucción 
\begin_inset Formula $state[p]$
\end_inset

, además cada propagador recibe un dominio y un estado, devolviendo:
\end_layout

\begin_layout Itemize
\begin_inset Formula $l$
\end_inset

, un listado de los tells (cambios de dominio) que el propagador ordena
 hacer.
\end_layout

\begin_layout Itemize
\begin_inset Formula $q$
\end_inset

, un nuevo estado, arrojado después de la propagación.
\end_layout

\begin_layout Plain Layout
El comando 
\begin_inset Formula $prop[x]$
\end_inset

 devuelve los propagadores subscritos a la variable 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Luego de propagar, se explora el listado de tells, y se ejecuta cada tell,
 lo que da como resultado un nuevo Store 
\begin_inset Formula $s$
\end_inset

, y por cada variable 
\begin_inset Formula $x$
\end_inset

 cuyo dominio haya sido modificado, se agregarán a la cola aquellos propagadores
 que estén subscritos a la variable 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Algoritmo de Propagación Gecode 2.1.1
\end_layout

\begin_layout Plain Layout
El algoritmo de propagación de Gecode 2.1.1 Introduce los Asesores.
\end_layout

\begin_layout Plain Layout
Un Asesor es una función que está relacionada con un propagador; el Asesor
 detecta qué variable ha cambiado y obtiene información sobre el cambio
 del dominio de variable .Según esta información, el Asesor puede hacer dos
 cosas:
\end_layout

\begin_layout Itemize
Indicarle al propagador si debe correr o no debe correr.
\end_layout

\begin_layout Itemize
Cambiar el estado del propagador para indicarle al propagador cómo debe
 propagar y de esta forma propagar más eficientemente.
 
\end_layout

\begin_layout Plain Layout
Un Asesor 
\begin_inset Formula $a$
\end_inset

 se define como una función que tiene como entrada un store 
\begin_inset Formula $s$
\end_inset

, un estado 
\begin_inset Formula $q$
\end_inset

 y un tell 
\begin_inset Formula $t$
\end_inset

 y retorna una pareja 
\begin_inset Formula $a(s,q,t)=<\sigma',Q>$
\end_inset

donde 
\begin_inset Formula $\sigma'$
\end_inset

es un estado y 
\begin_inset Formula $Q$
\end_inset

 es un conjunto de propagadores.
 Un Asesor da concejo a un solo propagador denominado 
\begin_inset Formula $prop[a]$
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

.
\end_layout

\begin_layout Plain Layout
La idea detrás de los Asesores radica en que es una función simple y que
 dentro de esta función no se intentará propagar
\begin_inset space ~
\end_inset

(hacer tells).
 En caso de indicar que no se debe propagar el conjunto sería equivalente
 a 
\begin_inset Formula $Q=\emptyset$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Un Asesor 
\begin_inset Formula $a$
\end_inset

 depende de una y una sola variable denominada 
\begin_inset Formula $var(a)$
\end_inset

; por tanto el Asesor 
\begin_inset Formula $a$
\end_inset

 será ejecutado solamente cuando la variable de la que depende fue modificada.La
 expresión 
\begin_inset Formula $adv[x]$
\end_inset

 
\begin_inset space ~
\end_inset

representa la lista de Asesores que dependen de la variable 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Teniendo en cuenta lo anterior el algoritmo propuesto para la propagación
 con Asesores es el siguiente:
\end_layout

\begin_layout Plain Layout
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/algoritmoGecode2.jpg
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Algoritmo de Propagación Centrado en los Propagadores con Asesores (Gecode
 2.1.1)
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
El algoritmo en general es el mismo, excepto en el último segmento, en donde
 por cada variable cuyo dominio ha sido modificado se explorara su lista
 de Asesores, llamándose a cada Asesor; esto cambiará internamente los estados
 de los propagadores y determinará cuáles propagadores deben encolarse.
 
\end_layout

\begin_layout Plain Layout
El cambio en el algoritmo de propagación tiene como consecuencia:
\end_layout

\begin_layout Itemize
Nuevos elementos a nivel de implementación :Objeto Delta, Asesor(Advisor,
 en inglés), Council(Grupo de Asesores).
\end_layout

\begin_layout Itemize
Cambio de responsabilidades de algunas tareas.
\end_layout

\begin_layout Subsection
Propagadores 
\end_layout

\begin_layout Itemize
Los propagadores ahora son encargados de terminar la subscripción de las
 variables que depende de ellos.
\end_layout

\begin_layout Itemize
Los propagadores tienen nuevas PC (condiciones de propagación, Propagation
 Conditions en inglés).
\end_layout

\begin_layout Itemize
La función Propagate recibe nuevos parámetros (Deltas), los objetos delta
 permiten en el método de la propagación saber qué tipo de cambio activó
 la PC (sobre quién se realizó el cambio de manera general e.g la banda inferior
 o superior).
\end_layout

\begin_layout Itemize
Los propagadores son encargados de implementar la función advise en caso
 de que se quiera usar los Asesores.
\end_layout

\begin_layout Itemize
Cambiaron la definición de algunas constantes de Gecode.
\end_layout

\begin_layout Itemize
Algunas restricciones sobre los booleanos disponibles en Gecode 1, no están
 en Gecode 2, sin embargo restricciones equivalentes son expresables.
\begin_inset Note Note
status open

\begin_layout Plain Layout
aquí se podría marcar un anexo donde se marquen los cambios a nivel de implement
ación mas detalladamente.
 Al momento no se si es prudente incluirlos o no.
 por el momento los dejare de lado
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Variables 
\end_layout

\begin_layout Plain Layout
En Gecode 1 las Variables BoolVar e IntVar dependían de la misma VarImp,
 esto quiere decir que dentro del kernel las variables booleanas eran manejadas
 como variables enteras cuyo dominio estaba entre 0 y 1.
 Esto permitía imponer restricciones de enteros sobre variables Booleanas
 y restricciones Booleanas sobre variables Enteras.
 
\end_layout

\begin_layout Plain Layout
En Gecode 2.1.1 las BoolVar tienen su propia VarImp lo que no permite imponer
 restricciones de Enteros sobre las BoolVar, e igualmente no permite imponer
 restricciones booleanas sobre variables Enteras.
 
\end_layout

\begin_layout Subsection
Distribución
\end_layout

\begin_layout Itemize
Las constantes para elegir las variables de distribución cambiaron de identifica
dor.
\end_layout

\begin_layout Subsection
Otros Problemas Encontrados
\end_layout

\begin_layout Plain Layout
A continuación se enumeran otros problemas encontrados durante la etapa
 de análisis del problema.
\end_layout

\begin_layout Plain Layout
Durante esta etapa se concluyó que:
\end_layout

\begin_layout Itemize
La implementación de CP(Graph) no contiene todos los propagadores y/o vistas
 expresados en la tesis de Gregoire Dooms
\end_layout

\begin_layout Itemize
Los usuarios de CP(Graph) realizan el modelamiento directamente sobre objetos
 que no tienen encapsulados los métodos que permiten realizar los tells.
\end_layout

\begin_layout Itemize
El propagador de PathDegree está incompleto para la vista 
\shape italic
NodeArcSetsGraphView
\shape default
, lo que al mismo tiempo hace que la restricción Path no funcione correctamente
 para todos las instancias, dado que la restricción de Path internamente
 está basada en la restricción de PathDegreee.
 Sin embargo PahtDegree funciona correctamente para la vista 
\shape italic
OutAdjSetsGraphView.
\end_layout

\begin_layout Itemize
Se encontró otra versión de CP(Graph) con más propagadores en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-18"

\end_inset

; sin embargo al no coincidir con la versión del repositorio Oficial, ni
 tener documentación de ayuda, además de tener un código fuente desordenado
 se descartó el trabajar sobre esta versión.
 Este trabajo de grado y las modificaciones hechas se hicieron sobre la
 versión encontrada en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-16"

\end_inset

.
 Sin embargo, se usaron algunos aportes encontrados en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-18"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
